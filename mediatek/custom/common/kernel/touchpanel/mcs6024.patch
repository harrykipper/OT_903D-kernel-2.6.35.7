diff -ruN mcs6024/mcs6024_driver.c mcs6024_proto/mcs6024_driver.c
--- mcs6024/mcs6024_driver.c	2012-11-27 13:01:55.000000000 +0200
+++ mcs6024_proto/mcs6024_driver.c	2012-11-27 13:01:52.000000000 +0200
@@ -46,6 +46,35 @@
 static int raw_x[MAX_POINT], raw_y[MAX_POINT];
 struct touch_info cinfo, sinfo;
 
+//wangdongliang 2012 for mstar
+#define u8         unsigned char
+#define u32        unsigned int
+#define s32        signed int
+
+#define MAX_TOUCH_FINGER 2
+typedef struct
+{
+    u16 X;
+    u16 Y;
+} TouchPoint_t;
+
+typedef struct
+{
+    u8 nTouchKeyMode;
+    u8 nTouchKeyCode;
+    u8 nFingerNum;
+    TouchPoint_t Point[MAX_TOUCH_FINGER];
+} TouchScreenInfo_t;
+
+
+
+#define REPORT_PACKET_LENGTH    (8)
+#define MSG21XX_INT_GPIO       (42)
+#define MSG21XX_RESET_GPIO     (22)
+#define MS_TS_MSG21XX_X_MAX   (320)
+#define MS_TS_MSG21XX_Y_MAX   (480)
+
+//end wangdongliang
 
 
 extern struct tpd_device *tpd;
@@ -86,7 +115,7 @@
 
 static struct i2c_client *i2c_client = NULL;
 static const struct i2c_device_id tpd_i2c_id[] = {{"mtk-tpd",0},{}};
-static unsigned short force[] = {0, 0x20, I2C_CLIENT_END,I2C_CLIENT_END};
+static unsigned short force[] = {0, 0x4c, I2C_CLIENT_END,I2C_CLIENT_END};
 static const unsigned short * const forces[] = { force, NULL };
 static struct i2c_client_address_data addr_data = { .forces = forces,};
 struct i2c_driver tpd_i2c_driver = {                       
@@ -100,29 +129,22 @@
 
 static void tpd_hw_enable(void)
 {
-    /* CTP_LDO */
-    mt_set_gpio_mode(GPIO38, 0);
-	mt_set_gpio_dir(GPIO38, GPIO_DIR_OUT);
-	mt_set_gpio_out(GPIO38, GPIO_OUT_ONE);
 
-    /* CTP_EN */
-	//mt_set_gpio_mode(GPIO21, 0);
-	//mt_set_gpio_dir(GPIO21, GPIO_DIR_OUT);
-	//mt_set_gpio_out(GPIO21, GPIO_OUT_ONE);
+    /* CTP_CE */
+	mt_set_gpio_mode(GPIO21, 0);
+	mt_set_gpio_dir(GPIO21, GPIO_DIR_OUT);
+	mt_set_gpio_out(GPIO21, GPIO_OUT_ONE);
+	
     mdelay(20);
 }
 
 static void tpd_hw_disable(void)
 {
     /* CTP_EN */
-    //mt_set_gpio_mode(GPIO21, 0);
-	//mt_set_gpio_dir(GPIO21, GPIO_DIR_OUT);
-	//mt_set_gpio_out(GPIO21, GPIO_OUT_ZERO);
-    
-    /* CTP_LDO */
-    mt_set_gpio_mode(GPIO38, 0);
-	mt_set_gpio_dir(GPIO38, GPIO_DIR_OUT);
-	mt_set_gpio_out(GPIO38, GPIO_OUT_ZERO);
+    mt_set_gpio_mode(GPIO21, 0);
+	mt_set_gpio_dir(GPIO21, GPIO_DIR_OUT);
+	mt_set_gpio_out(GPIO21, GPIO_OUT_ZERO);
+
 }
 
 static void tpd_i2c_master_send(struct i2c_client *client,const char *buf ,int count)
@@ -148,22 +170,31 @@
 
 static int tpd_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id) {             
 	int err = 0,i;
-	uint8_t Firmware_version[3] = {0x20,0x00,0x00};
+//	uint8_t Firmware_version[3] = {0x20,0x00,0x00};
 	i2c_client = client;
+       unsigned char tpd_buf[8] = {0};
 
-	#ifdef TPD_HAVE_POWER_ON_OFF
+//	#ifdef TPD_HAVE_POWER_ON_OFF
 	//for power on sequence
 	tpd_hw_enable();
+	mt_set_gpio_mode(GPIO21, 0);
+	mt_set_gpio_dir(GPIO21, GPIO_DIR_OUT);
+	mt_set_gpio_out(GPIO21, GPIO_OUT_ONE);
+
+    	mdelay(20);
+
+
+//eint config to gpio
+	    mt_set_gpio_mode(GPIO_CTP_EINT_PIN, GPIO_CTP_EINT_PIN_M_EINT);
+	    mt_set_gpio_dir(GPIO_CTP_EINT_PIN, GPIO_DIR_IN);
+	    mt_set_gpio_pull_enable(GPIO_CTP_EINT_PIN, GPIO_PULL_ENABLE);
+	    mt_set_gpio_pull_select(GPIO_CTP_EINT_PIN, GPIO_PULL_UP);
 
-	//for power on sequence
-	mt_set_gpio_mode(GPIO_CTP_EINT_PIN, GPIO_CTP_EINT_PIN_M_EINT);
-	mt_set_gpio_dir(GPIO_CTP_EINT_PIN, GPIO_DIR_IN);
-	mt_set_gpio_pull_enable(GPIO_CTP_EINT_PIN, GPIO_PULL_ENABLE);
-	mt_set_gpio_pull_select(GPIO_CTP_EINT_PIN, GPIO_PULL_UP);
 	
-	#endif
+//	#endif
 
 	msleep(20);
+
 	
 	#if 0
 	for(i = 0;i<5;i++)
@@ -196,10 +227,10 @@
     }    
     
 
-	mt65xx_eint_set_sens(CUST_EINT_TOUCH_PANEL_NUM, CUST_EINT_TOUCH_PANEL_SENSITIVE);
-	mt65xx_eint_set_hw_debounce(CUST_EINT_TOUCH_PANEL_NUM, CUST_EINT_TOUCH_PANEL_DEBOUNCE_CN);
-	mt65xx_eint_registration(CUST_EINT_TOUCH_PANEL_NUM, CUST_EINT_TOUCH_PANEL_DEBOUNCE_EN, CUST_EINT_TOUCH_PANEL_POLARITY, tpd_eint_interrupt_handler, 1);
-	mt65xx_eint_unmask(CUST_EINT_TOUCH_PANEL_NUM);
+    mt65xx_eint_set_sens(CUST_EINT_TOUCH_PANEL_NUM, CUST_EINT_TOUCH_PANEL_SENSITIVE);
+    mt65xx_eint_set_hw_debounce(CUST_EINT_TOUCH_PANEL_NUM, CUST_EINT_TOUCH_PANEL_DEBOUNCE_CN);
+    mt65xx_eint_registration(CUST_EINT_TOUCH_PANEL_NUM, CUST_EINT_TOUCH_PANEL_DEBOUNCE_EN, CUST_EINT_TOUCH_PANEL_POLARITY, tpd_eint_interrupt_handler, 1);
+    mt65xx_eint_unmask(CUST_EINT_TOUCH_PANEL_NUM);
 	
    tpd_load_status = 1;
     return 0;
@@ -208,6 +239,7 @@
 void tpd_eint_interrupt_handler(void) { 
 	//if(tpd_em_debuglog==1) 
 		//TPD_DMESG("[mtk-tpd], %s\n", __FUNCTION__);
+//		printk("xxxxxxxxx %s xxxxxxxxxxx\n", __FUNCTION__);
     TPD_DEBUG_PRINT_INT; tpd_flag=1; wake_up_interruptible(&waiter);
 } 
 static int tpd_i2c_remove(struct i2c_client *client) {return 0;}
@@ -295,6 +327,419 @@
 }
 
 
+
+ #if 0
+ static u8 Calculate_8BitsChecksum( u8 *msg, s32 s32Length )
+ {
+	 s32 s32Checksum = 0;
+	 s32 i;
+ 
+	 for ( i = 0 ; i < s32Length; i++ )
+	 {
+		 s32Checksum += msg[i];
+	 }
+ 
+	 return (u8)( ( -s32Checksum ) & 0xFF );
+ }
+ 
+
+ static void msg21xx_data_disposal(void)
+ {
+       u8 val[8] = {0};
+       u8 Checksum = 0;
+	u8 i;
+	u32 delta_x = 0, delta_y = 0;
+	u32 u32X = 0;
+	u32 u32Y = 0;
+	u8 touchkeycode = 0;
+	TouchScreenInfo_t  touchData;
+	static u32 preKeyStatus=0;
+	//static u32 preFingerNum=0;
+	printk("xxxxxxx %s xxxxxxx\n", __FUNCTION__);
+#define SWAP_X_Y   (1)
+//#define FLIP_X         (1)
+//#define FLIP_Y         (1)
+#ifdef SWAP_X_Y
+	int tempx;
+	int tempy;
+#endif
+
+
+	i2c_client->addr = i2c_client->addr & I2C_MASK_FLAG;
+	i2c_master_recv(i2c_client,&val[0],REPORT_PACKET_LENGTH);
+     Checksum = Calculate_8BitsChecksum(&val[0], 7); //calculate checksum
+    if ((Checksum == val[7]) && (val[0] == 0x52))   //check the checksum  of packet
+    {
+        u32X = (((val[1] & 0xF0) << 4) | val[2]);         //parse the packet to coordinates
+        u32Y = (((val[1] & 0x0F) << 8) | val[3]);
+
+        delta_x = (((val[4] & 0xF0) << 4) | val[5]);
+        delta_y = (((val[4] & 0x0F) << 8) | val[6]);
+
+#ifdef SWAP_X_Y
+		tempy = u32X;
+		tempx = u32Y;
+        u32X = tempx;
+        u32Y = tempy;
+
+		tempy = delta_x;
+		tempx = delta_y;
+        delta_x = tempx;
+        delta_y = tempy;
+#endif
+#ifdef FLIP_X
+       u32X = 2047 - u32X;
+       delta_x = 4095 -delta_x;
+#endif
+#ifdef FLIP_Y
+       u32Y = 2047 - u32Y;
+       delta_y = 4095 -delta_y;
+#endif
+      //printk("[HAL] u32X = %x, u32Y = %x", u32X, u32Y);
+      //printk("[HAL] delta_x = %x, delta_y = %x\n", delta_x, delta_y);
+
+        if ((val[1] == 0xFF) && (val[2] == 0xFF) && (val[3] == 0xFF) && (val[4] == 0xFF) && (val[6] == 0xFF))
+        {
+            touchData.Point[0].X = 0; // final X coordinate
+            touchData.Point[0].Y = 0; // final Y coordinate
+
+           if((val[5]==0x0)||(val[5]==0xFF))
+            {
+                touchData.nFingerNum = 0; //touch end
+                touchData.nTouchKeyCode = 0; //TouchKeyMode
+                touchData.nTouchKeyMode = 0; //TouchKeyMode
+            }
+            else
+            {
+                touchData.nTouchKeyMode = 1; //TouchKeyMode
+				        touchData.nTouchKeyCode = val[5]; //TouchKeyCode
+                touchData.nFingerNum = 1;
+            }
+        }
+		else
+		{
+		    touchData.nTouchKeyMode = 0; //Touch on screen...
+
+			if ((delta_x == 0) && (delta_y == 0))
+			{
+				touchData.nFingerNum = 1; //one touch
+				touchData.Point[0].X = (u32X * MS_TS_MSG21XX_X_MAX) / 2048;
+				touchData.Point[0].Y = (u32Y * MS_TS_MSG21XX_Y_MAX) / 2048;
+				printk("====x = %d, y = %d ====\n", touchData.Point[0].X, touchData.Point[0].Y);
+			}
+			else
+			{
+				u32 x2, y2;
+
+				touchData.nFingerNum = 2; //two touch
+
+				/* Finger 1 */
+				touchData.Point[0].X = (u32X * MS_TS_MSG21XX_X_MAX) / 2048;
+				touchData.Point[0].Y = (u32Y * MS_TS_MSG21XX_Y_MAX) / 2048;
+
+				/* Finger 2 */
+				if (delta_x > 2048)     //transform the unsigh value to sign value
+				{
+					delta_x -= 4096;
+				}
+				if (delta_y > 2048)
+				{
+					delta_y -= 4096;
+				}
+
+				x2 = (u32)(u32X + delta_x);
+				y2 = (u32)(u32Y + delta_y);
+
+				touchData.Point[1].X = (x2 * MS_TS_MSG21XX_X_MAX) / 2048;
+				touchData.Point[1].Y = (y2 * MS_TS_MSG21XX_Y_MAX) / 2048;
+			}
+		}
+		
+		//report...
+		if(touchData.nTouchKeyMode)
+		{
+			if (touchData.nTouchKeyCode == 1)
+				touchkeycode = KEY_HOME;
+			if (touchData.nTouchKeyCode == 2)
+				touchkeycode = KEY_MENU;
+			if (touchData.nTouchKeyCode == 4)
+				touchkeycode = KEY_BACK;
+			if (touchData.nTouchKeyCode == 8)
+				touchkeycode = KEY_HOMEPAGE;
+			
+
+			if(preKeyStatus!=touchkeycode)
+			{
+				preKeyStatus=touchkeycode;
+				input_report_key(tpd->dev, touchkeycode, 1);
+				//printk("&&&&&&&&useful key code report touch key code = %d\n",touchkeycode);
+			}
+			input_sync(tpd->dev);
+		}
+        else
+        {
+		    preKeyStatus=0; //clear key status..
+
+            if((touchData.nFingerNum) == 0)   //touch end
+            {
+ //           printk("xxxx release xxxx\n");
+				//preFingerNum=0;
+				input_report_key(tpd->dev, KEY_MENU, 0);
+				input_report_key(tpd->dev, KEY_HOME, 0);
+				input_report_key(tpd->dev, KEY_BACK, 0);
+				input_report_key(tpd->dev, KEY_HOMEPAGE, 0);
+
+
+				input_report_key(tpd->dev, BTN_TOUCH, 0);
+				input_report_abs(tpd->dev, ABS_MT_TOUCH_MAJOR, 0);
+				input_report_abs(tpd->dev, ABS_MT_WIDTH_MAJOR, 0);
+				input_report_abs(tpd->dev, ABS_PRESSURE, 0);
+//				input_report_abs(tpd->dev, ABS_MT_TOUCH_MAJOR, 0);
+				input_mt_sync(tpd->dev);
+				input_sync(tpd->dev);
+            }
+            else //touch on screen
+            {
+			    /*
+				if(preFingerNum!=touchData.nFingerNum)   //for one touch <--> two touch issue
+				{
+					printk("langwenlong number has changed\n");
+					preFingerNum=touchData.nFingerNum;
+					input_report_abs(tpd->dev, ABS_MT_TOUCH_MAJOR, 0);
+				    input_mt_sync(tpd->dev);
+				    input_sync(tpd->dev);
+				}*/
+
+				for(i = 0;i < (touchData.nFingerNum);i++)
+				{
+//					printk("i = %d, x = %d, y = %d \n", i, touchData.Point[i].X, touchData.Point[i].Y);
+					input_report_abs(tpd->dev, ABS_PRESSURE, 128);
+
+					input_report_key(tpd->dev, BTN_TOUCH, 1);
+					input_report_abs(tpd->dev, ABS_MT_TOUCH_MAJOR, 128);
+					input_report_abs(tpd->dev, ABS_MT_WIDTH_MAJOR, 128);
+
+//					input_report_abs(tpd->dev, ABS_MT_TOUCH_MAJOR, 1);
+					input_report_abs(tpd->dev, ABS_MT_POSITION_X, touchData.Point[i].X);
+					input_report_abs(tpd->dev, ABS_MT_POSITION_Y, touchData.Point[i].Y);
+					input_mt_sync(tpd->dev);
+				}
+
+				input_sync(tpd->dev);
+			}
+		}
+    }
+    else
+    {
+        //DBG("Packet error 0x%x, 0x%x, 0x%x", val[0], val[1], val[2]);
+        //DBG("             0x%x, 0x%x, 0x%x", val[3], val[4], val[5]);
+        //DBG("             0x%x, 0x%x, 0x%x", val[6], val[7], Checksum);
+		printk(KERN_ERR "err status in tp\n");
+    }
+ }
+#endif
+
+ static u8 Calculate_8BitsChecksum( u8 *msg, s32 s32Length )
+ {
+	 s32 s32Checksum = 0;
+	 s32 i;
+ 
+	 for ( i = 0 ; i < s32Length; i++ )
+	 {
+		 s32Checksum += msg[i];
+	 }
+ 
+	 return (u8)( ( -s32Checksum ) & 0xFF );
+ }
+ 
+ static void msg21xx_data_disposal(void)
+ {
+       u8 val[8] = {0};
+       u8 Checksum = 0;
+	u8 i;
+	u32 delta_x = 0, delta_y = 0;
+	u32 u32X = 0;
+	u32 u32Y = 0;
+	u8 touchkeycode = 0;
+	TouchScreenInfo_t  touchData;
+	static u32 preKeyStatus=0;
+	//static u32 preFingerNum=0;
+//	printk("xxxxxxxxxxx %s xxxxxxxxx\n", __FUNCTION__);
+#define SWAP_X_Y   (1)
+//#define REVERSE_X  (1)
+//#define REVERSE_Y  (1)
+#ifdef SWAP_X_Y
+	int tempx;
+	int tempy;
+#endif
+
+
+
+	i2c_master_recv(i2c_client,&val[0],REPORT_PACKET_LENGTH);
+     Checksum = Calculate_8BitsChecksum(&val[0], 7); //calculate checksum
+    if ((Checksum == val[7]) && (val[0] == 0x52))   //check the checksum  of packet
+    {
+        u32X = (((val[1] & 0xF0) << 4) | val[2]);         //parse the packet to coordinates
+        u32Y = (((val[1] & 0x0F) << 8) | val[3]);
+
+        delta_x = (((val[4] & 0xF0) << 4) | val[5]);
+        delta_y = (((val[4] & 0x0F) << 8) | val[6]);
+
+    #ifdef SWAP_X_Y
+		tempy = u32X;
+		tempx = u32Y;
+        u32X = tempx;
+        u32Y = tempy;
+
+		tempy = delta_x;
+		tempx = delta_y;
+        delta_x = tempx;
+        delta_y = tempy;
+	#endif
+	  #ifdef REVERSE_X
+	  u32X = 2047 - u32X;
+	  delta_x = 4095 - delta_x;
+	  #endif
+	  #ifdef REVERSE_Y
+	  u32Y = 2047 - u32Y;
+	  delta_y = 4095 - delta_y;
+	  #endif
+        //DBG("[HAL] u32X = %x, u32Y = %x", u32X, u32Y);
+        //DBG("[HAL] delta_x = %x, delta_y = %x", delta_x, delta_y);
+
+        if ((val[1] == 0xFF) && (val[2] == 0xFF) && (val[3] == 0xFF) && (val[4] == 0xFF) && (val[6] == 0xFF))
+        {
+            touchData.Point[0].X = 0; // final X coordinate
+            touchData.Point[0].Y = 0; // final Y coordinate
+
+           if((val[5]==0x0)||(val[5]==0xFF))
+            {
+                touchData.nFingerNum = 0; //touch end
+                touchData.nTouchKeyCode = 0; //TouchKeyMode
+                touchData.nTouchKeyMode = 0; //TouchKeyMode
+            }
+            else
+            {
+			touchData.nTouchKeyMode = 1; //TouchKeyMode
+			touchData.nTouchKeyCode = val[5]; //TouchKeyCode
+			touchData.nFingerNum = 1;
+            }
+        }
+		else
+		{
+		    touchData.nTouchKeyMode = 0; //Touch on screen...
+
+			if ((delta_x == 0) && (delta_y == 0))
+			{
+				touchData.nFingerNum = 1; //one touch
+				touchData.Point[0].X = (u32X * MS_TS_MSG21XX_X_MAX) / 2048;
+				touchData.Point[0].Y = (u32Y * MS_TS_MSG21XX_Y_MAX) / 2048;
+//				printk("====x = %d, y = %d ====\n", touchData.Point[0].X, touchData.Point[0].Y);
+
+			}
+			else
+			{
+				u32 x2, y2;
+
+				touchData.nFingerNum = 2; //two touch
+
+				/* Finger 1 */
+				touchData.Point[0].X = (u32X * MS_TS_MSG21XX_X_MAX) / 2048;
+				touchData.Point[0].Y = (u32Y * MS_TS_MSG21XX_Y_MAX) / 2048;
+
+				/* Finger 2 */
+				if (delta_x > 2048)     //transform the unsigh value to sign value
+				{
+					delta_x -= 4096;
+				}
+				if (delta_y > 2048)
+				{
+					delta_y -= 4096;
+				}
+
+				x2 = (u32)(u32X + delta_x);
+				y2 = (u32)(u32Y + delta_y);
+
+				touchData.Point[1].X = (x2 * MS_TS_MSG21XX_X_MAX) / 2048;
+				touchData.Point[1].Y = (y2 * MS_TS_MSG21XX_Y_MAX) / 2048;
+			}
+		}
+		
+		//report...
+		if(touchData.nTouchKeyMode)
+		{
+			if (touchData.nTouchKeyCode == 1)
+				touchkeycode = KEY_HOME;
+			if (touchData.nTouchKeyCode == 2)
+				touchkeycode = KEY_MENU;
+			if (touchData.nTouchKeyCode == 4)
+				touchkeycode = KEY_BACK;
+			if (touchData.nTouchKeyCode == 8)
+				touchkeycode = KEY_SEARCH;
+			
+
+			if(preKeyStatus!=touchkeycode)
+			{
+				preKeyStatus=touchkeycode;
+				input_report_key(tpd->dev, touchkeycode, 1);
+				//printk("&&&&&&&&useful key code report touch key code = %d\n",touchkeycode);
+			}
+			input_sync(tpd->dev);
+		}
+        else
+        {
+		    preKeyStatus=0; //clear key status..
+
+            if((touchData.nFingerNum) == 0)   //touch end
+            {
+				//preFingerNum=0;
+				input_report_key(tpd->dev, KEY_MENU, 0);
+				input_report_key(tpd->dev, KEY_HOME, 0);
+				input_report_key(tpd->dev, KEY_BACK, 0);
+				input_report_key(tpd->dev, KEY_SEARCH, 0);
+
+				input_report_abs(tpd->dev, ABS_MT_TOUCH_MAJOR, 0);
+				input_mt_sync(tpd->dev);
+				input_sync(tpd->dev);
+            }
+            else //touch on screen
+            {
+			    /*
+				if(preFingerNum!=touchData.nFingerNum)   //for one touch <--> two touch issue
+				{
+					printk("langwenlong number has changed\n");
+					preFingerNum=touchData.nFingerNum;
+					input_report_abs(tpd->dev, ABS_MT_TOUCH_MAJOR, 0);
+				    input_mt_sync(tpd->dev);
+				    input_sync(tpd->dev);
+				}*/
+
+				for(i = 0;i < (touchData.nFingerNum);i++)
+				{
+					input_report_abs(tpd->dev, ABS_MT_PRESSURE, 255);
+					input_report_abs(tpd->dev, ABS_MT_TOUCH_MAJOR, 255);
+					input_report_abs(tpd->dev, ABS_MT_POSITION_X, touchData.Point[i].X);
+					input_report_abs(tpd->dev, ABS_MT_POSITION_Y, touchData.Point[i].Y);
+					input_mt_sync(tpd->dev);
+				}
+
+				input_sync(tpd->dev);
+			}
+		}
+    }
+    else
+    {
+        //DBG("Packet error 0x%x, 0x%x, 0x%x", val[0], val[1], val[2]);
+        //DBG("             0x%x, 0x%x, 0x%x", val[3], val[4], val[5]);
+        //DBG("             0x%x, 0x%x, 0x%x", val[6], val[7], Checksum);
+		printk(KERN_ERR "err status in tp\n");
+    }
+ }
+
+
+
+
+
 static int touch_event_handler(void *unused) {
     struct sched_param param = { .sched_priority = RTPM_PRIO_TPD };
 
@@ -315,7 +760,7 @@
             TPD_DEBUG_SET_TIME;
         }
        		 set_current_state(TASK_RUNNING);
-
+#if 0
 			 if (tpd_show_version) {
 	            tpd_show_version = 0;
 			if(tpd_i2c_master_rs_send(i2c_client,Firmware_version,3<<8|1) < 0)
@@ -383,6 +828,11 @@
 		 	}
 
 		 input_sync(tpd->dev);
+
+#endif
+
+		 msg21xx_data_disposal();
+
 		
     } while (!kthread_should_stop());
     return 0;
@@ -429,7 +879,7 @@
 	//}
 	 tpd_halt = 1;
    	 mt65xx_eint_mask(CUST_EINT_TOUCH_PANEL_NUM);
-
+#if 0
 	uint8_t bfffer[2] = {0x01,0x00};
 	tpd_i2c_master_rs_send(i2c_client,bfffer,1<<8|1);
 	bfffer[1] &= ~0x0E;
@@ -440,15 +890,22 @@
 	mt_set_gpio_dir(GPIO_CTP_EN_PIN, GPIO_DIR_OUT);
 	mt_set_gpio_out(GPIO_CTP_EN_PIN, GPIO_OUT_ZERO);*/
 
-    tpd_hw_disable();
 #endif
 
+#endif
+    tpd_hw_disable();
+
 }
 
 /* Function to manage power-on resume */
 void tpd_resume(struct early_suspend *h) 
 {
 
+    tpd_hw_enable();
+
+mdelay(200);
+#if 0
+
 	uint8_t bfffer[2] = {0x01,0x02};
 
 	//if(tpd_debuglog==1) {
@@ -467,13 +924,13 @@
 	tpd_i2c_master_send(i2c_client,bfffer,2);
 	msleep(10);
 #endif
-
 	tpd_i2c_master_rs_send(i2c_client,bfffer,1<<8|1);
 	bfffer[1] &= ~0x0E;
 	bfffer[1] |= 0x02;
 	tpd_i2c_master_send(i2c_client,bfffer,2);
 	msleep(5);
-    mt65xx_eint_unmask(CUST_EINT_TOUCH_PANEL_NUM); 
+#endif
+	mt65xx_eint_unmask(CUST_EINT_TOUCH_PANEL_NUM); 
     tpd_halt = 0;
 }
 
