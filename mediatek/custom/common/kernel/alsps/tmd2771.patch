diff -ruN tmd2771.orig/tmd2771.c tmd2771.922/tmd2771.c
--- tmd2771.orig/tmd2771.c	2012-11-27 09:14:38.000000000 +0200
+++ tmd2771.922/tmd2771.c	2012-12-06 09:40:04.000000000 +0200
@@ -122,8 +122,7 @@
 
     atomic_t    als_cmd_val;    /*the cmd value can't be read, stored in ram*/
     atomic_t    ps_cmd_val;     /*the cmd value can't be read, stored in ram*/
-	atomic_t    ps_thd_val_high;     /*the cmd value can't be read, stored in ram*/
-	atomic_t    ps_thd_val_low;     /*the cmd value can't be read, stored in ram*/
+    atomic_t    ps_thd_val;     /*the cmd value can't be read, stored in ram*/
     ulong       enable;         /*enable mask*/
     ulong       pending_intr;   /*pending interrupt*/
 
@@ -430,7 +429,7 @@
 	}
 
 	databuf[0] = TMD2771_CMM_PPCOUNT;    
-	databuf[1] = 0x04;
+	databuf[1] = 0x08;
 	res = i2c_master_send(client, databuf, 0x2);
 	if(res <= 0)
 	{
@@ -665,14 +664,14 @@
 /*----------------------------------------------------------------------------*/
 static int tmd2771_get_ps_value(struct tmd2771_priv *obj, u16 ps)
 {
-	int val; //mask = atomic_read(&obj->ps_mask);
+	int val, mask = atomic_read(&obj->ps_mask);
 	int invalid = 0;
 
-	if(ps > atomic_read(&obj->ps_thd_val_high))
+	if(ps > atomic_read(&obj->ps_thd_val))
 	{
 		val = 0;  /*close*/
 	}
-	else if(ps < atomic_read(&obj->ps_thd_val_low))
+	else
 	{
 		val = 1;  /*far away*/
 	}
@@ -939,7 +938,7 @@
 		return -EINVAL;
 	}
  
-	tmd2771_enable(client, 1);/* power on */
+        tmd2771_enable(client, 1);/* power on */
 	tmd2771_power(obj->hw, 1);
 	if(err = tmd2771_init_client(client))
 	{
@@ -1071,7 +1070,6 @@
 				sensor_data = (hwm_sensor_data *)buff_out;	
 				tmd2771_read_ps(obj->client, &obj->ps);
 				
-				//printk("XXXXX ps-val = %d XXXXX\n", obj->ps);
 				sensor_data->values[0] = tmd2771_get_ps_value(obj, obj->ps);
 				sensor_data->value_divide = 1;
 				sensor_data->status = SENSOR_STATUS_ACCURACY_MEDIUM;			
@@ -1170,147 +1168,6 @@
 }
 
 /*----------------------------------------------------------------------------*/
-
-static int tmd2771_init_client_for_cali(struct i2c_client *client)
-{
-
-	struct tmd2771_priv *obj = i2c_get_clientdata(client);
-	u8 databuf[2];
-	int res = 0;
-
-	databuf[0] = TMD2771_CMM_ENABLE;
-	databuf[1] = 0x01;
-	res = i2c_master_send(client, databuf, 0x2);
-	if(res <= 0)
-	{
-		goto EXIT_ERR;
-		return TMD2771_ERR_I2C;
-	}
-
-	databuf[0] = TMD2771_CMM_ATIME;
-	databuf[1] = 0xEE;//0xEE
-	res = i2c_master_send(client, databuf, 0x2);
-	if(res <= 0)
-	{
-		goto EXIT_ERR;
-		return TMD2771_ERR_I2C;
-	}
-
-	databuf[0] = TMD2771_CMM_PTIME;
-	databuf[1] = 0xFF;
-	res = i2c_master_send(client, databuf, 0x2);
-	if(res <= 0)
-	{
-		goto EXIT_ERR;
-		return TMD2771_ERR_I2C;
-	}
-
-	databuf[0] = TMD2771_CMM_WTIME;
-	databuf[1] = 0xFF;//0xFF
-	res = i2c_master_send(client, databuf, 0x2);
-	if(res <= 0)
-	{
-		goto EXIT_ERR;
-		return TMD2771_ERR_I2C;
-	}
-
-	databuf[0] = TMD2771_CMM_CONFIG;
-	databuf[1] = 0x00;
-	res = i2c_master_send(client, databuf, 0x2);
-	if(res <= 0)
-	{
-		goto EXIT_ERR;
-		return TMD2771_ERR_I2C;
-	}
-
-	databuf[0] = TMD2771_CMM_PPCOUNT;
-	databuf[1] = 0x04;//0x02
-	res = i2c_master_send(client, databuf, 0x2);
-	if(res <= 0)
-	{
-		goto EXIT_ERR;
-		return TMD2771_ERR_I2C;
-	}
-
-	databuf[0] = TMD2771_CMM_CONTROL;
-	databuf[1] = 0x22;//0x22
-	res = i2c_master_send(client, databuf, 0x2);
-	if(res <= 0)
-	{
-		goto EXIT_ERR;
-		return TMD2771_ERR_I2C;
-	}
-
-	databuf[0] = TMD2771_CMM_ENABLE;
-	databuf[1] = 0x0F;
-	res = i2c_master_send(client, databuf, 0x2);
-	if(res <= 0)
-	{
-		goto EXIT_ERR;
-		return TMD2771_ERR_I2C;
-	}
-
-	return TMD2771_SUCCESS;
-
-EXIT_ERR:
-	APS_ERR("init dev: %d\n", res);
-	return res;
-
-}
-
-static void tmd2771_ps_calibrate(struct i2c_client *client)
-{
-	struct tmd2771_priv *obj = i2c_get_clientdata(client);
-	int prox_sum = 0, prox_mean = 0, prox_max = 0;
-	int prox_threshold_hi = 0, prox_threshold_lo = 0;
-	int i, ret = 0;
-	u16 prox_data[20];
-
-	tmd2771_init_client_for_cali(obj->client);
-
-	for(i = 0; i < 20; i++)
-	{
-		if(ret = tmd2771_read_ps(client, &prox_data[i]))
-		{
-			APS_ERR("tmd2771_read_data_for_cali fail: %d\n", i);
-			return ret;
-		}
-		prox_sum += prox_data[i];
-		if (prox_data[i] > prox_max)
-			prox_max = prox_data[i];
-
-		mdelay(60);//160
-
-		//printk("XXXXX ps-val = %d XXXXX\n", prox_data[i]);
-	}
-
-	prox_mean = prox_sum / 20;
-	prox_threshold_hi = ((((prox_max - prox_mean) * 350) + 50) / 100) + prox_mean;
-	prox_threshold_lo = ((((prox_max - prox_mean) * 310) + 50) / 100) + prox_mean;
-
-	atomic_set(&obj->ps_thd_val_high, prox_threshold_hi);
-	atomic_set(&obj->ps_thd_val_low,  prox_threshold_lo);
-	/* get smaller value */
-	if(atomic_read(&obj->ps_thd_val_low) < ((1000 * 2) / 100))
-	{
-		atomic_set(&obj->ps_thd_val_low, ((1000 * 5) / 100));
-		atomic_set(&obj->ps_thd_val_high, ((1000 * 8) / 100));
-	}
-
-	/* panel down */
-	if(atomic_read(&obj->ps_thd_val_high) > ((1000 * 60) / 100))
-	{
-		atomic_set(&obj->ps_thd_val_high, obj->hw->ps_threshold_high);
-		atomic_set(&obj->ps_thd_val_low,  obj->hw->ps_threshold_low);
-	}
-
-	printk("XXXXX ps_thd_val_low = %d XXXXX\n",  atomic_read(&obj->ps_thd_val_low));
-	printk("XXXXX ps_thd_val_high = %d XXXXX\n", atomic_read(&obj->ps_thd_val_high));
-
-	tmd2771_enable(obj->client, 0);
-
-}
-
 static int tmd2771_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
 {
 	struct tmd2771_priv *obj;
@@ -1341,8 +1198,7 @@
 	atomic_set(&obj->als_suspend, 0);
 	atomic_set(&obj->als_cmd_val, 0xDF);
 	atomic_set(&obj->ps_cmd_val,  0xC1);
-	atomic_set(&obj->ps_thd_val_high,  obj->hw->ps_threshold_high);
-	atomic_set(&obj->ps_thd_val_low,  obj->hw->ps_threshold_low);
+	atomic_set(&obj->ps_thd_val,  obj->hw->ps_threshold);
 	obj->enable = 0;
 	obj->pending_intr = 0;
 	obj->als_level_num = sizeof(obj->hw->als_level)/sizeof(obj->hw->als_level[0]);
@@ -1367,8 +1223,6 @@
 	}
 	APS_LOG("tmd2771_init_client() OK!\n");
 
-	tmd2771_ps_calibrate(client);
-
 	if(err = misc_register(&tmd2771_device))
 	{
 		APS_ERR("tmd2771_device register failed\n");
